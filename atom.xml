<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0.0ming&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="00ming.github.io/"/>
  <updated>2018-10-18T09:17:15.164Z</updated>
  <id>00ming.github.io/</id>
  
  <author>
    <name>0.0ming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>chrome extensions</title>
    <link href="00ming.github.io/2018/10/18/chrome%20extensions/"/>
    <id>00ming.github.io/2018/10/18/chrome extensions/</id>
    <published>2018-10-18T09:12:44.000Z</published>
    <updated>2018-10-18T09:17:15.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="chrome-extensions"><a href="#chrome-extensions" class="headerlink" title="chrome extensions"></a>chrome extensions</h1><h2 id="概观"><a href="#概观" class="headerlink" title="概观"></a><a href="https://developer.chrome.com/extensions/overview" target="_blank" rel="noopener">概观</a></h2><p>扩展程序是HTML，CSS，JavaScript，图像以及Web平台中使用的其他文件的压缩包，可自定义Google Chrome浏览体验。扩展是使用Web技术构建的，可以使用浏览器提供给开放Web的相同API。</p><h2 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h2><p>每一个chrome插件都有一个清单文件 <code>manifest.json</code>,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"manifest_version"</span>: <span class="number">2</span>,                        <span class="comment">// manifest编写规范版本，目前主流2</span></span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"My Extension"</span>,                        <span class="comment">// 插件名</span></span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"versionString"</span>,                    <span class="comment">// 版本号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里是最基本的信息 有了这些信息就算是一个插件了,<br>别的配置可以需配置,下面会介绍一些比较常用的配置<br><a id="more"></a></p><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"browser_action"</span>: &#123; <span class="comment">// 图标显示在地址栏右边，能在所有页面显示</span></span><br><span class="line">  <span class="string">"default_icon"</span>: &#123; <span class="comment">// 图标</span></span><br><span class="line">    <span class="string">"19"</span>: <span class="string">"images/icon.png"</span>, <span class="comment">// 不同的size</span></span><br><span class="line">    <span class="string">"38"</span>: <span class="string">"images/icon.png"</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"default_title"</span>: <span class="string">"My Extension"</span>, <span class="comment">// hover时展示的文字</span></span><br><span class="line">  <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span> <span class="comment">// 点击时的弹窗</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>举个栗子 ↓</p><p><img src="http://pbyegcye6.bkt.clouddn.com/popup.png" alt="image"></p><ul><li>箭头所指就是<code>default_icon</code>对应的图片</li><li>下面弹窗就是<code>default_popup</code> 所对应的页面</li><li>其中<code>default_popup</code>对应的HTML文件可以引入需要的js文件和CSS文件</li></ul><h3 id="页面脚本"><a href="#页面脚本" class="headerlink" title="页面脚本"></a>页面脚本</h3><p>嵌入页面的js脚本 ↓<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"content_scripts"</span>:[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"matches"</span>: [<span class="string">"http://*/*"</span>, <span class="string">"https://*/*"</span>], <span class="comment">// 生效的地址</span></span><br><span class="line">    <span class="comment">// "matches": ["&lt;all_urls&gt;"] "&lt;all_urls&gt;" 表示匹配所有地址</span></span><br><span class="line">    <span class="comment">// 多个JS按顺序注入</span></span><br><span class="line">    <span class="string">"js"</span>:[</span><br><span class="line">    <span class="string">"jquery.js"</span>,</span><br><span class="line">    <span class="string">"content_scripts.js"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"css"</span>: [<span class="string">"css/index.css"</span>], <span class="comment">// 注入css</span></span><br><span class="line">    <span class="comment">// 代码注入的时间，可选值： "document_start", "document_end", or "document_idle"，最后一个表示页面空闲时，默认document_idle</span></span><br><span class="line">    <span class="string">"run_at"</span>: <span class="string">"document_start"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>如果我做的是百度搜索的插件 可以修改<code>matches</code>的值为<code>[&quot;https://www.baidu.com/&quot;]</code>,这样这个注入的脚本就只会在你打开<code>www.baidu.com</code>的时候运行</p><h3 id="常驻后台js或者后台页面"><a href="#常驻后台js或者后台页面" class="headerlink" title="常驻后台js或者后台页面"></a>常驻后台js或者后台页面</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"background"</span>: &#123;</span><br><span class="line">  <span class="string">"scripts"</span>: [</span><br><span class="line">  <span class="comment">// 2种指定方式，如果指定JS，那么会自动生成一个背景页</span></span><br><span class="line">  <span class="comment">//"page": "background.html"</span></span><br><span class="line">  <span class="string">"scripts"</span>[<span class="string">"background.js"</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>background</code>的页面也可以通过chrome的开发这工具进行调试,方法如下:</p><p>点击浏览器右侧的3个点 -&gt; 更多工具 -&gt; 扩展程序<br>点击背景页</p><p><img src="http://pbyegcye6.bkt.clouddn.com/chrome-extenison-background.png" alt="image"></p><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"permissions"</span>: [</span><br><span class="line">  <span class="string">"tabs"</span>, <span class="comment">//标签</span></span><br><span class="line">  <span class="string">"contextMenus"</span>, <span class="comment">// 右键菜单</span></span><br><span class="line">  <span class="string">"notifications"</span>, <span class="comment">// 通知</span></span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h2><p><code>background</code>、<code>content_scripts</code>和<code>popup</code>都是独立的页面,通过使用消息传递机制进行通信，任何一方可以收到另一方传递来的消息，并且在相同的通道上答复。这个消息可以包含 任何一个有效的JSON对象(null, boolean, number, string, array, or object)。他们之间通过<code>runtime.sendMessage</code>或者<code>tabs.sendMessage</code>和<code>runtime.connect</code>或者<code>tabs.connect</code>来实现通信.</p><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>从内容脚本发送请求如下所示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome.runtime.sendMessage(&#123;<span class="attr">greeting</span>: <span class="string">"hello"</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.farewell);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>将扩展中的请求发送到内容脚本看起来非常相似，只是您需要指定将其发送到哪个选项卡。此示例演示如何向所选选项卡中的内容脚本发送消息。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chrome.tabs.query(&#123;<span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">tabs</span>) </span>&#123;</span><br><span class="line">  chrome.tabs.sendMessage(tabs[<span class="number">0</span>].id, &#123;<span class="attr">greeting</span>: <span class="string">"hello"</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.farewell);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在接收端，您需要设置 <code>runtime.onMessage</code> 事件侦听器来处理该消息。内容脚本或扩展页面看起来相同。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chrome.runtime.onMessage.addListener(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">request, sender, sendResponse</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(sender.tab ?</span><br><span class="line">                <span class="string">"from a content script:"</span> + sender.tab.url :</span><br><span class="line">                <span class="string">"from the extension"</span>);</span><br><span class="line">    <span class="keyword">if</span> (request.greeting == <span class="string">"hello"</span>)</span><br><span class="line">      sendResponse(&#123;<span class="attr">farewell</span>: <span class="string">"goodbye"</span>&#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>在上面的例子中，<code>sendResponse</code>被同步调用。如果要异步使用<code>sendResponse</code>，请添加 <code>return true;</code>到<code>onMessage</code>事件处理程序。</p><h3 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h3><p>有时，让对话持续时间超过单个请求和响应是有用的。在这种情况下，您可以分别使用<code>runtime.connect</code> 或<code>tabs.connect</code>打开从内容脚本到扩展页面的长期通道，反之亦然。通道可以选择使用名称，以便区分不同类型的连接。</p><p>一个用例可能是自动表单填写扩展。内容脚本可以打开特定登录的扩展页面的通道，并向页面上的每个输入元素的扩展发送消息以请求填写表单数据。共享连接允许扩展保持共享状态链接来自内容脚本的几条消息。</p><p>建立连接时，每个端都有一个<code>runtime.Port</code> 对象，用于通过该连接发送和接收消息。</p><p>以下是如何从内容脚本打开频道，以及发送和侦听消息的方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> port = chrome.runtime.connect(&#123;<span class="attr">name</span>: <span class="string">"knockknock"</span>&#125;);</span><br><span class="line">port.postMessage(&#123;<span class="attr">joke</span>: <span class="string">"Knock knock"</span>&#125;);</span><br><span class="line">port.onMessage.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (msg.question == <span class="string">"Who's there?"</span>)</span><br><span class="line">    port.postMessage(&#123;<span class="attr">answer</span>: <span class="string">"Madame"</span>&#125;);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (msg.question == <span class="string">"Madame who?"</span>)</span><br><span class="line">    port.postMessage(&#123;<span class="attr">answer</span>: <span class="string">"Madame... Bovary"</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>将扩展中的请求发送到内容脚本看起来非常相似，只是您需要指定要连接的选项卡。只需用<code>tabs.connect</code>替换上面示例中的connect连接。</p><p>为了处理传入连接，您需要设置<code>runtime.onConnect</code> 事件侦听器。这从内容脚本或扩展页面看起来是相同的。当扩展的另一部分调用“connect（）”时，将触发此事件以及 可用于通过连接发送和接收消息的<code>runtime.Port</code>对象。以下是响应传入连接的样子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chrome.runtime.onConnect.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">port</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.assert(port.name == <span class="string">"knockknock"</span>);</span><br><span class="line">  port.onMessage.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.joke == <span class="string">"Knock knock"</span>)</span><br><span class="line">      port.postMessage(&#123;<span class="attr">question</span>: <span class="string">"Who's there?"</span>&#125;);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (msg.answer == <span class="string">"Madame"</span>)</span><br><span class="line">      port.postMessage(&#123;<span class="attr">question</span>: <span class="string">"Madame who?"</span>&#125;);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (msg.answer == <span class="string">"Madame... Bovary"</span>)</span><br><span class="line">      port.postMessage(&#123;<span class="attr">question</span>: <span class="string">"I don't get it."</span>&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>开发了一个简单的扩展程序也踩了几个坑,谷歌官网的文档也很详细就是全英文吭起来比较辛苦.扩展程序有2个重点,一个是配置文件,另一个就是通信.解决了这两个问题debug和权限都很好解决,扩展程序的强大与否那就看开发者的编码能力了.</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://www.cnblogs.com/dreamman/p/9139080.html" target="_blank" rel="noopener">谷歌浏览器扩展程序manifest.json参数详解 - plugnt - 博客园</a></li><li><a href="https://www.cnblogs.com/deng-cc/p/9053539.html" target="_blank" rel="noopener">ChromeExtension入门浅谈 - Dulk - 博客园</a></li><li><a href="https://developer.chrome.com/extensions" target="_blank" rel="noopener">What are extensions? - Google Chrome</a> </li><li><a href="http://open.chrome.360.cn/extension_dev/messaging.html#external" target="_blank" rel="noopener">消息传递–扩展开发文档</a> 360浏览器用的是chrome内核,以上面chrome官方文档为准</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;chrome-extensions&quot;&gt;&lt;a href=&quot;#chrome-extensions&quot; class=&quot;headerlink&quot; title=&quot;chrome extensions&quot;&gt;&lt;/a&gt;chrome extensions&lt;/h1&gt;&lt;h2 id=&quot;概观&quot;&gt;&lt;a href=&quot;#概观&quot; class=&quot;headerlink&quot; title=&quot;概观&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.chrome.com/extensions/overview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;概观&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;扩展程序是HTML，CSS，JavaScript，图像以及Web平台中使用的其他文件的压缩包，可自定义Google Chrome浏览体验。扩展是使用Web技术构建的，可以使用浏览器提供给开放Web的相同API。&lt;/p&gt;
&lt;h2 id=&quot;清单&quot;&gt;&lt;a href=&quot;#清单&quot; class=&quot;headerlink&quot; title=&quot;清单&quot;&gt;&lt;/a&gt;清单&lt;/h2&gt;&lt;p&gt;每一个chrome插件都有一个清单文件 &lt;code&gt;manifest.json&lt;/code&gt;,&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;manifest_version&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,                        &lt;span class=&quot;comment&quot;&gt;// manifest编写规范版本，目前主流2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;My Extension&quot;&lt;/span&gt;,                        &lt;span class=&quot;comment&quot;&gt;// 插件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;versionString&quot;&lt;/span&gt;,                    &lt;span class=&quot;comment&quot;&gt;// 版本号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里是最基本的信息 有了这些信息就算是一个插件了,&lt;br&gt;别的配置可以需配置,下面会介绍一些比较常用的配置&lt;br&gt;
    
    </summary>
    
    
      <category term="chrome extensions" scheme="00ming.github.io/tags/chrome-extensions/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="00ming.github.io/2018/09/27/promise/"/>
    <id>00ming.github.io/2018/09/27/promise/</id>
    <published>2018-09-27T08:02:10.000Z</published>
    <updated>2018-09-28T07:51:23.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>promise/‘prɔmis/ <br> n.诺言;指望<br>vt.允诺<br>大概意思就是这个一定会做完的,至于什么时候做完就再说吧</p><h2 id="理解Promise"><a href="#理解Promise" class="headerlink" title="理解Promise"></a>理解Promise</h2><p>阮一峰在<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">《ECMAScript 6入门》</a>中是这样介绍<code>Promise</code>的</p><ul><li><code>Promise</code> 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象。</li><li>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，<code>Promise</code>是一个对象，从它可以获取异步操作的消息。<code>Promise</code> 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</li></ul><a id="more"></a><p><code>Promise</code>是用来处理异步操作的,以前我很肤浅的认为阻塞就是同步，非阻塞就是异步，现在发现我的理解是错的</p><p>我们得先了解什么是同步、异步、阻塞和非阻塞操作:</p><ul><li>同步和异步强调的是消息通信机制</li><li>阻塞和非阻塞强调的是程序在等待调用结果（消息，返回值）时的状态</li></ul><p>简单举几个例子</p><ul><li>小明叫我写ppt一直盯着我写直到我写完 (同步+阻塞)</li><li>小明叫我写ppt,然后他去写代码了,还是不是看看我写完ppt没有(同步+非阻塞)</li><li>小明叫我写ppt还一直监督我不让我偷懒,我写完之后告诉我写完了不用监督我了(异步+阻塞)</li><li>小明叫我写ppt,然后他去写代码了,我告诉他我写完之前他都不用管我,等我写完再来检查(异步+非阻塞)</li></ul><h2 id="Promise的特点"><a href="#Promise的特点" class="headerlink" title="Promise的特点"></a>Promise的特点</h2><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul><li>promise是一个包含了兼容promise规范then方法的对象或函数，</li><li>thenable 是一个包含了then方法的对象或函数。</li><li>value 是任何Javascript值。 (包括 undefined, thenable, promise等).</li><li>exception 是由throw表达式抛出来的值。</li><li>reason 是一个用于描述Promise被拒绝原因的值。</li></ul><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p><code>Promise</code>有3种状态,而且Promise对象的状态不受外界影响:</p><ul><li>pending（进行中）</li><li>fulfilled（已成功）</li><li>rejected（已失败）</li></ul><p>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p><h3 id="then方法"><a href="#then方法" class="headerlink" title="then方法"></a><code>then</code>方法</h3><p><code>Promise</code>通过链式调用<code>than</code>方法来改变他的状态,所以一个Promise必须提供一个<code>then</code>方法来获取其值或原因。</p><p><code>promise.then(onFulfilled, onRejected)</code><br>    1.其中<code>onFulfilled</code>和<code>onRejected</code>是成功和失败的回调函数,可以不填.<br>    2.他们只在<code>promise</code>状态改变后执行一次<br>    3.<code>then</code>必须返回一个<code>promise</code></p><h2 id="ES6中用法"><a href="#ES6中用法" class="headerlink" title="ES6中用法"></a>ES6中用法</h2><p><img src="http://pbyegcye6.bkt.clouddn.com/Promise.png" alt="img"><br>Promise是一个构造函数，自己身上有all、reject、resolve这几个眼熟的方法，原型上有then、catch等同样很眼熟的方法。这么说用Promise new出来的对象肯定就有then、catch方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);</span><br><span class="line">        resolve(<span class="string">'数据'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>既然Promise是一个构造函数首先就先把对象new出来,这个构造函数接收<code>Function</code>作为参数且这个<code>Function</code>有2个参数,分别接收上提到<code>onFulfilled</code>和<code>onRejected</code></p><h3 id="catch方法"><a href="#catch方法" class="headerlink" title="catch方法"></a><code>catch</code>方法</h3><p><code>then</code>方法上面已经提到过,这里就不重复了.现在我们来讲讲<code>catch</code>方法</p><ul><li>一看就知道是捕获异常,当执行 <code>resolve</code> 的回调（也就是上面 <code>then</code> 中的第一个参数）时，如果抛出异常了（代码出错了），那么也不会报错卡死 js，而是会进到这个 <code>catch</code> 方法中。</li><li>另一个特殊的用法是可以当做<code>than</code>方法的第二个参数来用,用来指定 <code>reject</code> 的回调,也就是术语中<code>reason</code><h3 id="all方法"><a href="#all方法" class="headerlink" title="all方法"></a><code>all</code>方法</h3>Promise 的 all 方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;        <span class="comment">//做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(<span class="string">'A'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;        <span class="comment">//做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(<span class="string">'B'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span></span><br><span class="line">.all([a(), b()])</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://pbyegcye6.bkt.clouddn.com/Promise2.png" alt="img"><br>函数 a b 都是异步的,用<code>all()</code>方法让他们都执行完再一起回调,他们的resolve的参数组成数组作为回调函数的参数</p><h3 id="race方法"><a href="#race方法" class="headerlink" title="race方法"></a><code>race</code>方法</h3><p><code>race</code>方法和<code>all</code>方法调用的方式是一样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;        </span><br><span class="line">    <span class="keyword">var</span> res = getInformation1();<span class="comment">//通过接口获取一些信息</span></span><br><span class="line">    resolve(res);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;        <span class="comment">//做一些异步操作</span></span><br><span class="line">    <span class="keyword">var</span> res = getInformation2();<span class="comment">//通过接口获取一些信息</span></span><br><span class="line">    resolve(res);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span></span><br><span class="line">.race([a(), b()])</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>和<code>all</code>一样,函数 a b都会执行,可是只要其中一个执行完,就会马上执行回调函数.值得注意的是其它没有执行完毕的异步操作仍然会继续执行，而不是停止。<br>值得注意的是:</p><p>一般我们用Promise的时候一般是包在一个函数中，在需要的时候去运行这个函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCouponCode</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        _this.$refs.ruleForm.validateField(<span class="string">'couponCode'</span>, err =&gt; &#123;</span><br><span class="line">            resolve(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是调用的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">checkCouponCode().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data !== <span class="string">''</span>) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'先输入或者选择优惠券编码'</span>));</span><br><span class="line">        <span class="keyword">this</span>.showCouponTypeInfo = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span><br><span class="line">            callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入或选择优惠券批次号'</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 验证优惠券</span></span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这是当年我写的一段垃圾代码,虽然能够执行但是可读性很差<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCouponCode</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        _this.$refs.ruleForm.validateField(<span class="string">'couponCode'</span>, err =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err === <span class="string">''</span>) &#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkCouponCode().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 验证优惠券</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断错误的类型</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样改了后可读性就增加很多了<br><a href="https://promisesaplus.com/" target="_blank" rel="noopener">Promises/A+规范</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h1&gt;&lt;p&gt;promise/‘prɔmis/ &lt;br&gt; n.诺言;指望&lt;br&gt;vt.允诺&lt;br&gt;大概意思就是这个一定会做完的,至于什么时候做完就再说吧&lt;/p&gt;
&lt;h2 id=&quot;理解Promise&quot;&gt;&lt;a href=&quot;#理解Promise&quot; class=&quot;headerlink&quot; title=&quot;理解Promise&quot;&gt;&lt;/a&gt;理解Promise&lt;/h2&gt;&lt;p&gt;阮一峰在&lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《ECMAScript 6入门》&lt;/a&gt;中是这样介绍&lt;code&gt;Promise&lt;/code&gt;的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Promise&lt;/code&gt; 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了&lt;code&gt;Promise&lt;/code&gt;对象。&lt;/li&gt;
&lt;li&gt;所谓&lt;code&gt;Promise&lt;/code&gt;，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，&lt;code&gt;Promise&lt;/code&gt;是一个对象，从它可以获取异步操作的消息。&lt;code&gt;Promise&lt;/code&gt; 提供统一的 API，各种异步操作都可以用同样的方法进行处理。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="00ming.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API</title>
    <link href="00ming.github.io/2018/09/18/restful%20API/"/>
    <id>00ming.github.io/2018/09/18/restful API/</id>
    <published>2018-09-18T07:30:43.000Z</published>
    <updated>2018-09-28T07:51:46.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h1><p>表现层状态转换（REST，英文：Representational State Transfer）是Roy Thomas Fielding博士于2000年在他的博士论文 中提出来的一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。表现层状态转换（REST，英文：Representational State Transfer）是根基于超文本传输协议(HTTP)之上而确定的一组约束和属性，是一种设计提供万维网络服务的软件构建风格。匹配或兼容于这种架构风格(简称为 REST 或 RESTful)的网络服务，允许客户端发出以统一资源标识符访问和操作网络资源的请求，而与预先定义好的无状态操作集一致化。==需要注意的是，REST是设计风格而不是标准==.</p><p><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义</a><br><a id="more"></a></p><p>## </p><h3 id="看http-method就知道干什么"><a href="#看http-method就知道干什么" class="headerlink" title="看http method就知道干什么"></a>看http method就知道干什么</h3><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><ul><li>安全且幂等 (幂等的介绍可以参考:<a href="https://www.cnblogs.com/duhuo/p/4245202.html" target="_blank" rel="noopener">编程中的幂等性 — HTTP幂等性</a>)</li><li>获取表示</li><li>可以被缓存<h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5></li><li>不安全且不幂等</li><li>使用服务端管理的（自动产生）的实例号创建资源</li><li>创建子资源</li><li>部分更新资源</li><li>如果没有被修改，则不更新资源（<a href="https://baike.baidu.com/item/%E4%B9%90%E8%A7%82%E9%94%81/7146502" target="_blank" rel="noopener">乐观锁</a>）<h5 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h5></li><li>不安全但幂等</li><li>用客户端管理的实例号创建一个资源  </li><li>通过替换的方式更新资源  </li><li>如果未被修改，则更新资源（乐观锁）<h5 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h5></li><li>不安全但幂等</li><li>删除资源</li></ul><h5 id="POST-和-PUT-都可以用于创建和修改资源，它们的区别是什么呢？"><a href="#POST-和-PUT-都可以用于创建和修改资源，它们的区别是什么呢？" class="headerlink" title="POST 和 PUT 都可以用于创建和修改资源，它们的区别是什么呢？"></a>POST 和 PUT 都可以用于创建和修改资源，它们的区别是什么呢？</h5><p>最大的区别就是 <code>PUT</code> 是幂等 而 <code>POST</code>不是<br>这就决定的他们是使用上的区别</p><p>在创建资源时，<code>PUT</code>可以指定资源路径，<code>POST</code>无法指定资源路径。<br>因而，<code>PUT</code>是幂等的操作，即重复操作不会产生变化，10次<code>PUT</code> 的创建请求与1次<code>PUT</code> 的创建请求相同，只会创建一个资源，其实后面9次的请求只是对已创建资源的更新，且更新内容与原内容相同，所以不会产生变化。相当于<code>x = 5</code>执行多少次<code>x</code>的值都是5</p><p><code>POST</code> 的重复操作截然不同，10次<code>POST</code>请求将会创建10个资源。相当于<code>x ++</code>,每次执行<code>x</code>的值都会变化</p><p>简单来说<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET     获取一个资源 </span><br><span class="line">POST    添加一个资源 </span><br><span class="line">PUT     修改一个资源 </span><br><span class="line">DELETE  删除一个资源</span><br></pre></td></tr></table></figure></p><h3 id="看Url就知道要什么"><a href="#看Url就知道要什么" class="headerlink" title="看Url就知道要什么"></a>看Url就知道要什么</h3><p>REST 是面向资源的，这个概念非常重要，而资源是通过 URI 进行暴露。<br>http method是动词表示要做什么,URL中只使用名词来指定资源且推荐用复数,表示动作的对象.<br>在知乎上看到这么一段<a href="https://www.zhihu.com/question/28557115/answer/47846156" target="_blank" rel="noopener">原文</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /rest/api/getDogs --&gt; GET /rest/api/dogs 获取所有小狗狗 </span><br><span class="line">GET /rest/api/addDogs --&gt; POST /rest/api/dogs 添加一个小狗狗 </span><br><span class="line">GET /rest/api/editDogs/:dog_id --&gt; PUT /rest/api/dogs/:dog_id 修改一个小狗狗 </span><br><span class="line">GET /rest/api/deleteDogs/:dog_id --&gt; DELETE /rest/api/dogs/:dog_id 删除一个小狗狗</span><br></pre></td></tr></table></figure></p><p><code>/rest/api/dogs/</code>只表示资源的地址,通过http method来确定操作</p><h3 id="看http-status-code就知道结果如何"><a href="#看http-status-code就知道结果如何" class="headerlink" title="看http status code就知道结果如何"></a>看http status code就知道结果如何</h3><p>使用正确的HTTP Status Code表示访问状态：<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">HTTP/1.1: Status Code Definitions</a></p><p>设计方法可以学习阮一峰老师的<br><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://mccxj.github.io/blog/20130530_introduce-to-rest.html" target="_blank" rel="noopener">理解RESTFul架构 | 小毛的胡思乱想</a></li><li><a href="https://www.zhihu.com/question/28557115" target="_blank" rel="noopener">怎样用通俗的语言解释REST，以及RESTful？ - 知乎</a></li><li><a href="https://blog.csdn.net/maxmao1024/article/details/79591726" target="_blank" rel="noopener">Restful API 以及对 Put/Post 区别理解 - CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/30396391" target="_blank" rel="noopener">如何给老婆解释什么是RESTful</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RESTful-API&quot;&gt;&lt;a href=&quot;#RESTful-API&quot; class=&quot;headerlink&quot; title=&quot;RESTful API&quot;&gt;&lt;/a&gt;RESTful API&lt;/h1&gt;&lt;p&gt;表现层状态转换（REST，英文：Representational State Transfer）是Roy Thomas Fielding博士于2000年在他的博士论文 中提出来的一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。表现层状态转换（REST，英文：Representational State Transfer）是根基于超文本传输协议(HTTP)之上而确定的一组约束和属性，是一种设计提供万维网络服务的软件构建风格。匹配或兼容于这种架构风格(简称为 REST 或 RESTful)的网络服务，允许客户端发出以统一资源标识符访问和操作网络资源的请求，而与预先定义好的无状态操作集一致化。==需要注意的是，REST是设计风格而不是标准==.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/09/restful.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="API" scheme="00ming.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>浏览器缓存</title>
    <link href="00ming.github.io/2018/08/29/%E7%BC%93%E5%AD%98/"/>
    <id>00ming.github.io/2018/08/29/缓存/</id>
    <published>2018-08-29T08:02:10.000Z</published>
    <updated>2018-09-28T07:52:23.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h1><p>浏览器缓存分为两种，分别为 <strong>强缓存</strong>（也称本地缓存） 和 <strong>协商缓存</strong>（也称弱缓存）。</p><p>对于强缓存和协商缓存，判定过程如下：</p><p>浏览器加载资源时，先根据 response 的 header 中某些字段判断是否命中强缓存，若命中，浏览器直接从缓存中读取资源，不会发送请求到服务器。<br>当强缓存没有命中的时候，浏览器一定会发送一个请求到服务器，此时服务器根据 resquest 的 header 中某些字段判断是否命中协商缓存，若命中，服务器返回请求，但不会返回这个资源的数据，而是告诉客户端可以直接从缓存中加载这个资源。<br>对于强缓存和协商缓存，共同点在于，若命中，它们都是从客户端缓存中加载资源，而不是从服务器加载资源数据；而不同点在于，强缓存不发请求到服务器，协商缓存会发请求到服务器以咨询缓存是否过期。</p><a id="more"></a><h5 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h5><p>强缓存是利用 http 头中的 Expires 和 Cache-Control 两个字段来控制的，用来表示资源的缓存时间。<br>强缓存中，普通刷新会忽略它，但不会清除它；而强制刷新，请求会带上 Cache-Control:no-cache 和 Pragma:no-cache。</p><h5 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h5><p>简而言之，协商缓存就是想服务器发送请求以咨询本地缓存是否可用。<br>协商缓存主要涉及两组 header 字段： Etag 和 If-None-Match、Last-Modified 和 If-Modified-Since.</p><p>普通刷新会启用协商缓存，忽略强缓存。只有在地址栏或收藏夹输入网址、通过链接引用资源等情况下，浏览器才会启用强缓存，这也是为什么有时候我们更新一张图片、一个 js 文件，页面内容依然是旧的，但是直接浏览器访问那个图片或文件，看到的内容却是新的。<br>相关请求头下文有详细介绍</p><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>iframe算是个历史问题,比较早期的网站使用 iframe，主要是用于导航栏（navigator）。因为一个网站很多页面的导航栏部分是相同的，在避免切换页面的时候重复下载，将导航栏和正文分开在 iframe 中，是一个方便的做法。同时带来的不利是，默认情况下，使用了 iframe 的网站的 URL 不会随着页面的变化而变化。<br><a href="https://www.zhihu.com/question/20653055/answer/15751248" target="_blank" rel="noopener">参考</a></p><p><img src="http://pbyegcye6.bkt.clouddn.com/%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98%E5%8D%B4%E4%BB%8E%E7%A1%AC%E7%9B%98%E8%AF%BB%E7%BC%93%E5%AD%98.png" alt="image"></p><p>这个iframe里内嵌的一个页面,==采用的协商缓存的策略,可是却直接从硬盘(disk)里面获取缓存,并没有与服务器校对,直接返回200而不是304==.这样会造成服务器上的文件已经被修改过了,但是浏览器显示的文件却不是最新的.对于这样的情况,下文提供了一些解决办法希望给遇到同样问题的人提供参考.</p><h1 id="缓存相关请求头"><a href="#缓存相关请求头" class="headerlink" title="缓存相关请求头"></a>缓存相关请求头</h1><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>Expires的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。<br>不过Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。<br>另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。<br>所以HTTP 1.1 的版本，使用Cache-Control替代。</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><ul><li>private:         客户端可以缓存</li><li>public:              客户端和代理服务器都可缓存</li><li>max-age=xxx:   缓存的内容将在 xxx 秒后失效</li><li>no-cache:          需要使用对比缓存来验证缓存数据</li><li>no-store:           所有内容都不会缓存，强制缓存，对比缓存都不会触发</li></ul><h4 id="last-modified-和-If-Modify-Since"><a href="#last-modified-和-If-Modify-Since" class="headerlink" title="last-modified 和 If-Modify-Since"></a>last-modified 和 If-Modify-Since</h4><p>服务器在响应请求时，告诉浏览器资源的最后修改时间。<br>其执行过程如下：</p><p> 1.当第一次发起 HTTP 请求时，服务器 response 的 header 中包含 Last-Modify ，标明该资源的最后修改时间，如：<code>Mon, 16 Jul 2018 11:14:47 GMT</code></p><p>2.当再次发起 HTTP 请求时，客户端 requset 的 header 中包含 If-Modify-Since 字段，该值为缓存之前服务器返回的 Last-Modify 的值，服务器收到 If-Modify-Since 后，根据资源的最后修改时间判断是否命中缓存。</p><p>3.如果命中缓存，则返回 304 ，并且不会返回资源内容，并且不会返回 Last-Modify </p><h3 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h3><p>服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。<br>既然有了last-modified 和 If-Modify-Since来让浏览器知道本地的缓存副本是否足够新那为什么需要Etag呢?<br>那是因为Last-Modified 标注的最后修改只能精确到秒级，如果某些文件在 1 秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间.</p><p>此外,Etag是可以跟Last-Modified一起使用的,服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</p><h3 id="If-None-Match"><a href="#If-None-Match" class="headerlink" title="If-None-Match"></a>If-None-Match</h3><p>再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。<br>服务器收到请求后发现有头If-None-Match 则与被请求资源的唯一标识进行比对，<br>不同，说明资源又被改动过，则响应整片资源内容，返回状态码200；<br>相同，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。</p><h1 id="页面缓存的一些解决方法"><a href="#页面缓存的一些解决方法" class="headerlink" title="页面缓存的一些解决方法"></a>页面缓存的一些解决方法</h1><h2 id="比较简单解决方法"><a href="#比较简单解决方法" class="headerlink" title="比较简单解决方法"></a>比较简单解决方法</h2><p>在html文件加入mate标签 控制请求头 对chrome浏览器无效<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"pragma"</span> <span class="attr">CONTENT</span>=<span class="string">"no-cache"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"Cache-Control"</span> <span class="attr">CONTENT</span>= <span class="string">"no-cache, must-revalidate"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"expires"</span> <span class="attr">CONTENT</span>= <span class="string">"Wed, 26 Feb 1997 08:21:57 GMT"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="另一解决方法-未实践"><a href="#另一解决方法-未实践" class="headerlink" title="另一解决方法(未实践)"></a>另一解决方法(未实践)</h2><p>根据协强缓存策略:强缓存是利用 http 头中的 Expires 和 Cache-Control 两个字段来控制的，用来表示资源的缓存时间<br>只需要在nginx反向代理的时候加<code>Cache-Control:no-cache</code>和<code>Pragma:no-cache</code> 这两个请求头就能清除缓存,通过合理设置<code>expires</code>缓存时间就能很好的合理运用缓存<br><a href="http://www.nginx.cn/doc/standard/httpheaders.html" target="_blank" rel="noopener">修改方法</a></p><h2 id="目前使用解决办法"><a href="#目前使用解决办法" class="headerlink" title="目前使用解决办法"></a>目前使用解决办法</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>浏览器为了提高用户访问同一页面的速度，会对页面数据进行缓存。当url请求地址不变时，有时候会导致浏览器不发送请求，直接从缓存中读取之前的数据。如果数据改变了，而没加随机数，读取的数据会跟之前一样。加上随机数，就是欺骗浏览器url改变了，会每次都向服务器发送请求而不去读缓存。</p><p>除了随机数以外还能在在ULR后面加上者<strong>版本号</strong> 和 <strong>文件的md5</strong><br>用md5的话每次修改后都会改变 保证每次都能获取修改后的资源,包括CDN 随机数每次都变化浪费请求的资源 版本号在两者之间CDN更新会不同步</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>百度一搜”版本防缓存”基本都是加版本号和md5的,加随机数的比较少.其实缓存是必须的,如果每次都要从服务器获取资源的话,会影响用户的体验.一是HTTP 1.0 和1.1的最大并发连接数是6左右 (不同浏览器有差异),二是建立连接到获取数据需要时间.要运用好缓存,而不是一味的强制缓存或者禁止缓存.这样才能收益最大化.</p><h4 id="通过插件添加md5码来防止缓存"><a href="#通过插件添加md5码来防止缓存" class="headerlink" title="通过插件添加md5码来防止缓存"></a>通过插件添加md5码来防止缓存</h4><p><em>下面讲的跟浏览器无关,只是用工具批量加?v=(md5)来解决ifame强制缓存的问题,有需要的朋友可以参考</em></p><p>grunt和gulp都是基于task的前端构建工具这里我用的是 <strong>gulp</strong><br>因为要改的项目历史比较久远,本身并没有什么自动化的工具,也不敢改动太多所以机缘巧合下选了这个工具.</p><p>引用下面3个文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>);</span><br><span class="line"><span class="keyword">var</span> revFormat = <span class="built_in">require</span>(<span class="string">'gulp-rev-Format'</span>);</span><br><span class="line"><span class="keyword">var</span> revReplace = <span class="built_in">require</span>(<span class="string">'gulp-rev-replace'</span>);</span><br><span class="line"><span class="keyword">var</span> replace = <span class="built_in">require</span>(<span class="string">'gulp-replace'</span>);</span><br></pre></td></tr></table></figure></p><p>前面3个是提取文件对应md5码并且格式化<br>最后一个是替换到对应URL后面</p><p>被提取出来的文件对应的md5会被保存在<code>./app/rev-manifest.json</code>文件里,内容类如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"Activity_CheckInfo2.html"</span>: <span class="string">"Activity_CheckInfo2.259348dacd.cache.html"</span>,</span><br><span class="line">  <span class="string">"Activity_Definition.html"</span>: <span class="string">"Activity_Definition.22d05704c3.cache.html"</span>,</span><br><span class="line">  .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本来插件的功能是将文件名由 <code>A.html</code>改为 <code>A.(md5).html</code>,这显然与我现在在URL后加<code>?t=(md5)</code>的实践不符,所以我对<code>task</code>进行加工加上<code>.cache</code>来识别md5到哪结束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'rev'</span>, () =&gt; &#123;</span><br><span class="line">  gulp.src([<span class="string">'pc_member/**/*.js'</span>, <span class="string">'pc_member/**/*.css'</span>, <span class="string">'pc_member/views/*.html'</span>, <span class="string">'pc_member/views/info/*.html'</span>, <span class="string">'pc_member/views/logs/*.html'</span>, <span class="string">'pc_member/views/statistics/*.html'</span>, <span class="string">'pc_member/views/system/*.html'</span>, <span class="string">'pc_member/views/activity/*.html'</span>])</span><br><span class="line">    .pipe(rev())</span><br><span class="line">    .pipe(revFormat(&#123;</span><br><span class="line">      prefix: <span class="string">'.'</span>, <span class="comment">// 在版本号前增加字符  </span></span><br><span class="line">      suffix: <span class="string">'.cache'</span>, <span class="comment">// 在版本号后增加字符  </span></span><br><span class="line">      lastExt: <span class="literal">false</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(rev.manifest(&#123;</span><br><span class="line">      merge: <span class="literal">true</span> <span class="comment">// merge with the existing manifest (if one exists)</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"app/"</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>整理出要用的结构以后就可以提取出来替换进html里面了<br>上面提到加<code>.cache</code>是为了正则运行更方便的提取中间那段md5<br>提取出来后通过<code>gulp-revReplace</code>插件替换到html文件里面就好了<br>详细的讲解在第二篇参考文章里面有详细描叙 我这里去掉了部分我不需要的组件更为精简.<br>想详细了解的可以前去浏览<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'add-version'</span>, [<span class="string">'rev'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> manifest = gulp.src([<span class="string">"./app/rev-manifest.json"</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">modifyUnreved</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> filename;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">modifyReved</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// filename是：admin.69cef10fff.cache.css的一个文件名  </span></span><br><span class="line">    <span class="comment">// 在这里才发现刚才用gulp-rev-format的作用了吧？就是为了做正则匹配，  </span></span><br><span class="line">    <span class="keyword">if</span> (filename.indexOf(<span class="string">'.cache'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">// 通过正则和relace得到版本号：69cef10fff  </span></span><br><span class="line">      <span class="keyword">const</span> _version = filename.match(<span class="regexp">/\.[\w]*\.cache/</span>)[<span class="number">0</span>].replace(<span class="regexp">/(\.|cache)*/g</span>, <span class="string">""</span>);</span><br><span class="line">      <span class="comment">// 把版本号和gulp-rev-format生成的字符去掉，剩下的就是原文件名：admin.css  </span></span><br><span class="line">      <span class="keyword">const</span> _filename = filename.replace(<span class="regexp">/\.[\w]*\.cache/</span>, <span class="string">""</span>);</span><br><span class="line">      <span class="comment">// 重新定义文件名和版本号：admin.css?v=69cef10fff  </span></span><br><span class="line">      filename = _filename + <span class="string">"?v="</span> + _version;</span><br><span class="line">      <span class="comment">// 返回由gulp-rev-replace替换文件名  </span></span><br><span class="line">      <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> filename;</span><br><span class="line">  &#125;</span><br><span class="line">  gulp.src([<span class="string">'pc_member/**/*.html'</span>])</span><br><span class="line">  <span class="comment">// 删除原来的版本   </span></span><br><span class="line">    .pipe(replace(<span class="regexp">/(\.[a-z]+)\?(v=)[^\'\"\&amp;]*/g</span>, <span class="string">"$1"</span>))</span><br><span class="line">    .pipe(replace(<span class="regexp">/(\.[a-z]+)\?[^\'\"\&amp;]*/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> res = match.replace(<span class="string">'?'</span>, <span class="string">'&amp;'</span>);</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(revReplace(&#123;</span><br><span class="line">      manifest: manifest,</span><br><span class="line">      modifyUnreved: modifyUnreved,</span><br><span class="line">      modifyReved: modifyReved</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/'</span>))</span><br><span class="line">    .pipe(connect.reload());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>参考网址:</p><p><a href="http://obkoro1.com/2018/06/09/%E6%B5%85%E6%9E%90HTTP%E7%BC%93%E5%AD%98%E7%9A%84%E6%9C%BA%E5%88%B6-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/" target="_blank" rel="noopener">浅析HTTP缓存的机制-浏览器缓存 | OBKoro1’s Blog</a></p><p><a href="https://hexo.bangz.me/archives/http-cache-tutorial.html" target="_blank" rel="noopener">HTTP 缓存机制（强缓存与协商缓存） | BangZ’s 梦工厂</a></p><p><a href="https://www.cnblogs.com/wonyun/p/5524617.html" target="_blank" rel="noopener">http协商缓存VS强缓存 - wonyun - 博客园</a></p><p><a href="https://blog.csdn.net/zchcode/article/details/52421871" target="_blank" rel="noopener">前端静态资源版本更新与缓存之——通过gulp 在原html文件上自动化添加js、css版本号 - CSDN博客</a></p><p><a href="https://segmentfault.com/a/1190000010315249" target="_blank" rel="noopener">gulp进阶：文件号自动添加MD5后缀的三种方法与坑位提醒 - 个人文章 - SegmentFault 思否</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浏览器缓存&quot;&gt;&lt;a href=&quot;#浏览器缓存&quot; class=&quot;headerlink&quot; title=&quot;浏览器缓存&quot;&gt;&lt;/a&gt;浏览器缓存&lt;/h1&gt;&lt;p&gt;浏览器缓存分为两种，分别为 &lt;strong&gt;强缓存&lt;/strong&gt;（也称本地缓存） 和 &lt;strong&gt;协商缓存&lt;/strong&gt;（也称弱缓存）。&lt;/p&gt;
&lt;p&gt;对于强缓存和协商缓存，判定过程如下：&lt;/p&gt;
&lt;p&gt;浏览器加载资源时，先根据 response 的 header 中某些字段判断是否命中强缓存，若命中，浏览器直接从缓存中读取资源，不会发送请求到服务器。&lt;br&gt;当强缓存没有命中的时候，浏览器一定会发送一个请求到服务器，此时服务器根据 resquest 的 header 中某些字段判断是否命中协商缓存，若命中，服务器返回请求，但不会返回这个资源的数据，而是告诉客户端可以直接从缓存中加载这个资源。&lt;br&gt;对于强缓存和协商缓存，共同点在于，若命中，它们都是从客户端缓存中加载资源，而不是从服务器加载资源数据；而不同点在于，强缓存不发请求到服务器，协商缓存会发请求到服务器以咨询缓存是否过期。&lt;/p&gt;
    
    </summary>
    
    
      <category term="浏览器原理" scheme="00ming.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Test-driven development</title>
    <link href="00ming.github.io/2018/01/09/Test-driven%20development/"/>
    <id>00ming.github.io/2018/01/09/Test-driven development/</id>
    <published>2018-01-09T07:59:00.000Z</published>
    <updated>2018-09-28T09:08:03.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Test-driven-development"><a href="#Test-driven-development" class="headerlink" title="Test-driven development"></a>Test-driven development</h1><p>之前在知乎上看到一篇文章 <a href="https://zhuanlan.zhihu.com/p/31662844" target="_blank" rel="noopener">如何说服你的同事使用TDD</a></p><p>TDD（Test-driven development），也就是我们常说的“测试驱动开发”,先不说有没有被说服.我就想到前端能不能用这么一种开发模式,<br>用这种开发方式有没有好处.<br>我试着在js中试着敲上面文章中的例子.先去找了下js的测试框架<br>JsUnit J3Unit YUI Test Mocha.js qunit 等等一大堆 有兴趣和有水平的同学可以自己去看看 因为基本的是一大堆英文<br>我就用了webstrom款ide 里面有JsTestDriver 这个一个插件 用了以后会跟上文接近(在代码下面有红有绿~)<br><img src="http://pbyegcye6.bkt.clouddn.com/TDD1.png" alt="image"><br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>文中的例子来自  <a href="http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata" target="_blank" rel="noopener">UncleBob.TheBowlingGameKata</a><br>经常用js去操作DOM元素填充模版,拼接字符串,做做表单验证什么的,写这种还有些变扭.</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>Bob大叔的保龄球训练<br>这是一道计算保龄球比赛一局总得分的编程题，保龄球的计分规则非常简单：<br>每一局总共有十轮，每轮一开始会有十支球瓶，球手可以扔两次球，目标就是用尽量少的球把全部球瓶击倒。<br>如果第一球就把全部的球瓶都击倒了，也就是STRIKE，画面出现“X”，就算完成一轮了，所得分数是10分再加后面两球的倒瓶数，<br>如果第一球没有全倒，就要再打一球，如果第二球将剩下的球瓶全都击倒，也就是SPARE，画面出现“/”，也算完成一格，所得分数为10分再加下一格第一球的倒瓶数，<br>如果第二球也没有把球瓶全部击倒的话，那分数就是第一球加第二球倒的瓶数，没有奖励（bonus），再接着打下一格。依此类推。<br>第十轮有机会扔三次球。如果在第十轮出现STRIKE或者SPARE，则球手可再加打第三球。<br>全部十轮的得分相加就等于这一局的总得分。<br>题目要求我们提供一个名字为Game的类，这个类有两个方法：<br>roll(pins : int)：每次球员扔球后执行这个方法，入参是此次扔球击倒的球瓶数量。<br>score()：每局比赛结束时执行的方法，返回这局比赛的总得分。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>先上Demo:<a href="https://github.com/00ming/TheBowlingGameKata" target="_blank" rel="noopener">https://github.com/00ming/TheBowlingGameKata</a><br>怕你们看不完<br>老规矩一开始先写测试用例,先开始一场游戏开始是0分<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="keyword">new</span> game();</span><br><span class="line">assertEquals(<span class="number">0</span>, g.score())</span><br></pre></td></tr></table></figure></p><p>再写代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> game = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.score = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试一下  ok了<br>再改测试用例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="keyword">new</span> game();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>;i ++) &#123;</span><br><span class="line">    g.roll(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">assertEquals(<span class="number">0</span>, g.score());</span><br></pre></td></tr></table></figure></p><p>保龄球一局有10格,一格可以扔2次<br>再改代码………<br>经过一个漫长的过程<br>最后的测试用例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">TestCase(<span class="string">"GameTest"</span>, &#123;</span><br><span class="line">    <span class="string">"test "</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">rollMany</span> (<span class="params">roll,pins</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; roll;i ++) &#123;</span><br><span class="line">                g.roll(pins)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> g = <span class="keyword">new</span> game();</span><br><span class="line">        rollMany(<span class="number">20</span>,<span class="number">0</span>)</span><br><span class="line">        assertEquals(<span class="number">0</span>, g.score());</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"test all one"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">rollMany</span> (<span class="params">roll,pins</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; roll;i ++) &#123;</span><br><span class="line">                g.roll(pins)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> g = <span class="keyword">new</span> game();</span><br><span class="line">        rollMany(<span class="number">20</span>,<span class="number">1</span>)</span><br><span class="line">        assertEquals(<span class="number">20</span>, g.score());</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"test profect game"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">rollMany</span> (<span class="params">roll,pins</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; roll;i ++) &#123;</span><br><span class="line">                g.roll(pins)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> g = <span class="keyword">new</span> game();</span><br><span class="line">        rollMany(<span class="number">12</span>,<span class="number">10</span>)</span><br><span class="line">        assertEquals(<span class="number">300</span>, g.score());</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"test one strike"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">rollMany</span> (<span class="params">roll,pins</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; roll;i ++) &#123;</span><br><span class="line">                g.roll(pins)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> g = <span class="keyword">new</span> game();</span><br><span class="line">        g.roll(<span class="number">10</span>)</span><br><span class="line">        g.roll(<span class="number">3</span>)</span><br><span class="line">        g.roll(<span class="number">4</span>)</span><br><span class="line">        rollMany(<span class="number">17</span>,<span class="number">0</span>)</span><br><span class="line">        assertEquals(<span class="number">24</span>, g.score());</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"test one spare"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">rollMany</span> (<span class="params">roll,pins</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; roll;i ++) &#123;</span><br><span class="line">                g.roll(pins)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> g = <span class="keyword">new</span> game()</span><br><span class="line">        g.roll(<span class="number">3</span>)</span><br><span class="line">        g.roll(<span class="number">7</span>)</span><br><span class="line">        g.roll(<span class="number">7</span>)</span><br><span class="line">        rollMany(<span class="number">17</span>,<span class="number">0</span>)</span><br><span class="line">        assertEquals(<span class="number">24</span>, g.score());</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">最后的代码:</span><br><span class="line"><span class="keyword">var</span> game = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> rolls = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">    <span class="keyword">var</span> currentRoll = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 全中</span></span><br><span class="line">    <span class="keyword">var</span> isStrike = <span class="function"><span class="keyword">function</span> (<span class="params">frameIndex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rolls[frameIndex] === <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 全中奖励2球</span></span><br><span class="line">    <span class="keyword">var</span> strikeBonus = <span class="function"><span class="keyword">function</span> (<span class="params">frameIndex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rolls[frameIndex + <span class="number">1</span>] + rolls[frameIndex + <span class="number">2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 补中</span></span><br><span class="line">    <span class="keyword">var</span> isSpare = <span class="function"><span class="keyword">function</span> (<span class="params">frameIndex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rolls[frameIndex] + rolls[frameIndex+<span class="number">1</span>] === <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.roll = <span class="function"><span class="keyword">function</span> (<span class="params">pins</span>) </span>&#123;</span><br><span class="line">        rolls[currentRoll++] = pins</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.score = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> frameIndex = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> frame = <span class="number">0</span>;frame &lt; <span class="number">10</span>;frame ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isStrike(frameIndex)) &#123;</span><br><span class="line">                score += <span class="number">10</span> + strikeBonus(frameIndex)</span><br><span class="line">                frameIndex ++</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSpare(frameIndex)) &#123;</span><br><span class="line">                score += <span class="number">10</span> + rolls[frameIndex + <span class="number">2</span>]</span><br><span class="line">                frameIndex += <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                score += rolls[frameIndex] + rolls[frameIndex + <span class="number">1</span>]</span><br><span class="line">                frameIndex += <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> score</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>过程bob大叔那都有,不过是java的我这也不一步一步写,因为真的好烦.<br>经过这么一轮下来,代码写得不咋的却清楚了解了保龄球的计分方式.<br>写这么一小段代码我已经重构的N遍,有因为方法写的不好的,也有在没完全了解保龄球几分方式下写出错误的测试用例导致代码错误的,总之自己把自己坑得不要不要的…..</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没有全能的技术也没有全能的开发方式,TDD带来了最大好处是提高了单元测试的覆盖率,但是写测试用例的过程也是非常耗时费脑子的事情.</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>TDD写出来的代码比起平时拿到需求就直接写程序,边写边想写出来的代码要准确很多,考虑到更多的情况,代码更加健壮这是不可否认的.</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>要想做好TDD，必须掌握好单元测试、重构等技能，还要能够写出整洁代码,如果写出来的单元测试本来就是错的,那代码肯定也是错的(刚刚经历完).而且这种思维模式也难以适应,在写这小段代码的时候我差点控制不住自己要把函数写完再改测试用例,最后还是坚持下来了.如果这是一个更负责的函数的话对测试用例的要求会更高,会有更多的测试用例.</p><p>要开发人员花费额外的时间写测试用例,但代码效率有提高这点不知道算有点还算缺点了.<br>回到最初的讨论”到前端能不能用这么一种开发模式,用这种开发方式有没有好处” 前端的操作相对简单需要的测试用例也不多,有尝试的可能,如果能开展下去代码的质量有一定的提升.在逻辑稍微复杂的函数上使用效果更为明显.<br>以上均是我个人观点,不代表实际情况</p><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>这是很久以前的文章,后来整理的找出来了,还是用word文档写的这次移到markdown上.这应该是第一篇参考别人写的文章,迁移感触很深.虽然写的真的很烂,没有什么结构可言,逻辑也不清晰,还不是原创的,缺点多到数不完.但是现在看起来还是那么亲切,相比之下感受到自己的进步,还是蛮欣慰的.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Test-driven-development&quot;&gt;&lt;a href=&quot;#Test-driven-development&quot; class=&quot;headerlink&quot; title=&quot;Test-driven development&quot;&gt;&lt;/a&gt;Test-driven development&lt;/h1&gt;&lt;p&gt;之前在知乎上看到一篇文章 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/31662844&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何说服你的同事使用TDD&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TDD（Test-driven development），也就是我们常说的“测试驱动开发”,先不说有没有被说服.我就想到前端能不能用这么一种开发模式,&lt;br&gt;用这种开发方式有没有好处.&lt;br&gt;我试着在js中试着敲上面文章中的例子.先去找了下js的测试框架&lt;br&gt;JsUnit J3Unit YUI Test Mocha.js qunit 等等一大堆 有兴趣和有水平的同学可以自己去看看 因为基本的是一大堆英文&lt;br&gt;我就用了webstrom款ide 里面有JsTestDriver 这个一个插件 用了以后会跟上文接近(在代码下面有红有绿~)&lt;br&gt;&lt;img src=&quot;http://pbyegcye6.bkt.clouddn.com/TDD1.png&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="test" scheme="00ming.github.io/tags/test/"/>
    
  </entry>
  
</feed>
